"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7814],{7550:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"middleware/logger","title":"Logger","description":"Logger middleware","source":"@site/docs/middleware/logger.md","sourceDirName":"middleware","slug":"/middleware/logger","permalink":"/docs/middleware/logger","draft":false,"unlisted":false,"editUrl":"https://github.com/labstack/echox/blob/master/website/docs/middleware/logger.md","tags":[],"version":"current","frontMatter":{"description":"Logger middleware"},"sidebar":"docsSidebar","previous":{"title":"Key Auth","permalink":"/docs/middleware/key-auth"},"next":{"title":"Method Override","permalink":"/docs/middleware/method-override"}}');var o=n(4848),s=n(8453);const a={description:"Logger middleware"},l="Logger",i={},u=[{value:"Old Logger middleware",id:"old-logger-middleware",level:2},{value:"Usage",id:"usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Default Configuration",id:"default-configuration",level:3},{value:"New RequestLogger middleware",id:"new-requestlogger-middleware",level:2},{value:"Examples",id:"examples",level:3},{value:"Troubleshooting Tips",id:"troubleshooting-tips",level:3},{value:"1. Solution for &quot;panic: missing LogValuesFunc callback function for request logger middleware&quot;",id:"1-solution-for-panic-missing-logvaluesfunc-callback-function-for-request-logger-middleware",level:4},{value:"2. If Parameters in Logs Are Empty",id:"2-if-parameters-in-logs-are-empty",level:4}];function g(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"logger",children:"Logger"})}),"\n",(0,o.jsx)(t.p,{children:"Logger middleware logs the information about each HTTP request."}),"\n",(0,o.jsx)(t.p,{children:"Echo has 2 different logger middlewares:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Older string template based logger ",(0,o.jsx)(t.a,{href:"https://github.com/labstack/echo/blob/master/middleware/logger.go",children:(0,o.jsx)(t.code,{children:"Logger"})})," - easy to start with but has limited capabilities"]}),"\n",(0,o.jsxs)(t.li,{children:["Newer customizable function based logger ",(0,o.jsx)(t.a,{href:"https://github.com/labstack/echo/blob/master/middleware/request_logger.go",children:(0,o.jsx)(t.code,{children:"RequestLogger"})})," - allows developer fully to customize what is logged and how it is logged. Suitable for usage with 3rd party logger libraries."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"old-logger-middleware",children:"Old Logger middleware"}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:"e.Use(middleware.Logger())\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Sample output"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-exec",children:'{"time":"2017-01-12T08:58:07.372015644-08:00","remote_ip":"::1","host":"localhost:1323","method":"GET","uri":"/","status":200,"error":"","latency":14743,"latency_human":"14.743\xb5s","bytes_in":0,"bytes_out":2}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,o.jsx)(t.h3,{id:"usage-1",children:"Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n  Format: "method=${method}, uri=${uri}, status=${status}\\n",\n}))\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Example above uses a ",(0,o.jsx)(t.code,{children:"Format"})," which logs request method and request URI."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Sample output"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-exec",children:"method=GET, uri=/, status=200\n"})}),"\n",(0,o.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'// LoggerConfig defines the config for Logger middleware.\nLoggerConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Tags to construct the logger format.\n  //\n  // - time_unix\n  // - time_unix_milli\n  // - time_unix_micro\n  // - time_unix_nano\n  // - time_rfc3339\n  // - time_rfc3339_nano\n  // - time_custom\n  // - id (Request ID)\n  // - remote_ip\n  // - uri\n  // - host\n  // - method\n  // - path\n  // - protocol\n  // - referer\n  // - user_agent\n  // - status\n  // - error\n  // - latency (In nanoseconds)\n  // - latency_human (Human readable)\n  // - bytes_in (Bytes received)\n  // - bytes_out (Bytes sent)\n  // - header:<NAME>\n  // - query:<NAME>\n  // - form:<NAME>\n  //\n  // Example "${remote_ip} ${status}"\n  //\n  // Optional. Default value DefaultLoggerConfig.Format.\n  Format string `yaml:"format"`\n\n  // Optional. Default value DefaultLoggerConfig.CustomTimeFormat.\n  CustomTimeFormat string `yaml:"custom_time_format"`\n\n  // Output is a writer where logs in JSON format are written.\n  // Optional. Default value os.Stdout.\n  Output io.Writer\n}\n'})}),"\n",(0,o.jsx)(t.h3,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'DefaultLoggerConfig = LoggerConfig{\n  Skipper: DefaultSkipper,\n  Format: `{"time":"${time_rfc3339_nano}","id":"${id}","remote_ip":"${remote_ip}",` +\n    `"host":"${host}","method":"${method}","uri":"${uri}","user_agent":"${user_agent}",` +\n    `"status":${status},"error":"${error}","latency":${latency},"latency_human":"${latency_human}"` +\n    `,"bytes_in":${bytes_in},"bytes_out":${bytes_out}}` + "\\n",\n  CustomTimeFormat: "2006-01-02 15:04:05.00000",\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"new-requestlogger-middleware",children:"New RequestLogger middleware"}),"\n",(0,o.jsx)(t.p,{children:"RequestLogger middleware allows developer fully to customize what is logged and how it is logged and is more suitable\nfor usage with 3rd party (structured logging) libraries."}),"\n",(0,o.jsxs)(t.p,{children:["You can quickly acquaint yourself with the values that the logger knows to extract by referring to the fields of the ",(0,o.jsx)(t.a,{href:"https://github.com/labstack/echo/blob/master/middleware/request_logger.go",children:(0,o.jsx)(t.code,{children:"RequestLoggerConfig"})})," structure below. Or click the link to view the most up-to-date details."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'type RequestLoggerConfig struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper Skipper\n\n\t// BeforeNextFunc defines a function that is called before next middleware or handler is called in chain.\n\tBeforeNextFunc func(c echo.Context)\n\t// LogValuesFunc defines a function that is called with values extracted by logger from request/response.\n\t// Mandatory.\n\tLogValuesFunc func(c echo.Context, v RequestLoggerValues) error\n\n\t// HandleError instructs logger to call global error handler when next middleware/handler returns an error.\n\t// This is useful when you have custom error handler that can decide to use different status codes.\n\t//\n\t// A side-effect of calling global error handler is that now Response has been committed and sent to the client\n\t// and middlewares up in chain can not change Response status code or response body.\n\tHandleError bool\n\n\t// LogLatency instructs logger to record duration it took to execute rest of the handler chain (next(c) call).\n\tLogLatency bool\n\t// LogProtocol instructs logger to extract request protocol (i.e. `HTTP/1.1` or `HTTP/2`)\n\tLogProtocol bool\n\t// LogRemoteIP instructs logger to extract request remote IP. See `echo.Context.RealIP()` for implementation details.\n\tLogRemoteIP bool\n\t// LogHost instructs logger to extract request host value (i.e. `example.com`)\n\tLogHost bool\n\t// LogMethod instructs logger to extract request method value (i.e. `GET` etc)\n\tLogMethod bool\n\t// LogURI instructs logger to extract request URI (i.e. `/list?lang=en&page=1`)\n\tLogURI bool\n\t// LogURIPath instructs logger to extract request URI path part (i.e. `/list`)\n\tLogURIPath bool\n\t// LogRoutePath instructs logger to extract route path part to which request was matched to (i.e. `/user/:id`)\n\tLogRoutePath bool\n\t// LogRequestID instructs logger to extract request ID from request `X-Request-ID` header or response if request did not have value.\n\tLogRequestID bool\n\t// LogReferer instructs logger to extract request referer values.\n\tLogReferer bool\n\t// LogUserAgent instructs logger to extract request user agent values.\n\tLogUserAgent bool\n\t// LogStatus instructs logger to extract response status code. If handler chain returns an echo.HTTPError,\n\t// the status code is extracted from the echo.HTTPError returned\n\tLogStatus bool\n\t// LogError instructs logger to extract error returned from executed handler chain.\n\tLogError bool\n\t// LogContentLength instructs logger to extract content length header value. Note: this value could be different from\n\t// actual request body size as it could be spoofed etc.\n\tLogContentLength bool\n\t// LogResponseSize instructs logger to extract response content length value. Note: when used with Gzip middleware\n\t// this value may not be always correct.\n\tLogResponseSize bool\n\t// LogHeaders instructs logger to extract given list of headers from request. Note: request can contain more than\n\t// one header with same value so slice of values is been logger for each given header.\n\t//\n\t// Note: header values are converted to canonical form with http.CanonicalHeaderKey as this how request parser converts header\n\t// names to. For example, the canonical key for "accept-encoding" is "Accept-Encoding".\n\tLogHeaders []string\n\t// LogQueryParams instructs logger to extract given list of query parameters from request URI. Note: request can\n\t// contain more than one query parameter with same name so slice of values is been logger for each given query param name.\n\tLogQueryParams []string\n\t// LogFormValues instructs logger to extract given list of form values from request body+URI. Note: request can\n\t// contain more than one form value with same name so slice of values is been logger for each given form value name.\n\tLogFormValues []string\n\n}\n'})}),"\n",(0,o.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,o.jsxs)(t.p,{children:["Example for naive ",(0,o.jsx)(t.code,{children:"fmt.Printf"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'skipper := func(c echo.Context) bool {\n\t// Skip health check endpoint\n    return c.Request().URL.Path == "/health"\n}\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n\tLogStatus: true,\n\tLogURI:    true,\n\tSkipper: skipper,\n\tBeforeNextFunc: func(c echo.Context) {\n\t\tc.Set("customValueFromContext", 42)\n\t},\n\tLogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n\t\tvalue, _ := c.Get("customValueFromContext").(int)\n\t\tfmt.Printf("REQUEST: uri: %v, status: %v, custom-value: %v\\n", v.URI, v.Status, value)\n\t\treturn nil\n\t},\n}))\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Sample output"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-exec",children:"REQUEST: uri: /hello, status: 200, custom-value: 42\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Example for slog (",(0,o.jsx)(t.a,{href:"https://pkg.go.dev/log/slog",children:"https://pkg.go.dev/log/slog"}),")"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'logger := slog.New(slog.NewJSONHandler(os.Stdout, nil))\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n    LogStatus:   true,\n    LogURI:      true,\n    LogError:    true,\n    HandleError: true, // forwards error to the global error handler, so it can decide appropriate status code\n    LogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n        if v.Error == nil {\n            logger.LogAttrs(context.Background(), slog.LevelInfo, "REQUEST",\n                slog.String("uri", v.URI),\n                slog.Int("status", v.Status),\n            )\n        } else {\n            logger.LogAttrs(context.Background(), slog.LevelError, "REQUEST_ERROR",\n                slog.String("uri", v.URI),\n                slog.Int("status", v.Status),\n                slog.String("err", v.Error.Error()),\n            )\n        }\n        return nil\n    },\n}))\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Sample output"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-exec",children:'{"time":"2024-12-30T20:55:46.2399999+08:00","level":"INFO","msg":"REQUEST","uri":"/hello","status":200}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Example for Zerolog (",(0,o.jsx)(t.a,{href:"https://github.com/rs/zerolog",children:"https://github.com/rs/zerolog"}),")"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'logger := zerolog.New(os.Stdout)\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n\tLogURI:    true,\n\tLogStatus: true,\n\tLogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n\t\tlogger.Info().\n\t\t\tStr("URI", v.URI).\n\t\t\tInt("status", v.Status).\n\t\t\tMsg("request")\n\n\t\treturn nil\n\t},\n}))\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Sample output"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-exec",children:'{"level":"info","URI":"/hello","status":200,"message":"request"}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Example for Zap (",(0,o.jsx)(t.a,{href:"https://github.com/uber-go/zap",children:"https://github.com/uber-go/zap"}),")"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'logger, _ := zap.NewProduction()\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n\tLogURI:    true,\n\tLogStatus: true,\n\tLogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n\t\tlogger.Info("request",\n\t\t\tzap.String("URI", v.URI),\n\t\t\tzap.Int("status", v.Status),\n\t\t)\n\n\t\treturn nil\n\t},\n}))\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Sample output"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-exec",children:'{"level":"info","ts":1735564026.3197417,"caller":"cmd/main.go:20","msg":"request","URI":"/hello","status":200}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Example for Logrus (",(0,o.jsx)(t.a,{href:"https://github.com/sirupsen/logrus",children:"https://github.com/sirupsen/logrus"}),")"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'log := logrus.New()\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n\tLogURI:    true,\n\tLogStatus: true,\n\tLogValuesFunc: func(c echo.Context, values middleware.RequestLoggerValues) error {\n\t\tlog.WithFields(logrus.Fields{\n\t\t\t"URI":   values.URI,\n\t\t\t"status": values.Status,\n\t\t}).Info("request")\n\n\t\treturn nil\n\t},\n}))\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Sample output"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-exec",children:'time="2024-12-30T21:08:49+08:00" level=info msg=request URI=/hello status=200\n'})}),"\n",(0,o.jsx)(t.h3,{id:"troubleshooting-tips",children:"Troubleshooting Tips"}),"\n",(0,o.jsx)(t.h4,{id:"1-solution-for-panic-missing-logvaluesfunc-callback-function-for-request-logger-middleware",children:'1. Solution for "panic: missing LogValuesFunc callback function for request logger middleware"'}),"\n",(0,o.jsxs)(t.p,{children:["This panic arises when the ",(0,o.jsx)(t.code,{children:"LogValuesFunc"})," callback function, which is mandatory for the request logger middleware configuration, is left unset."]}),"\n",(0,o.jsxs)(t.p,{children:["To address this, you must define a suitable function that adheres to the ",(0,o.jsx)(t.code,{children:"LogValuesFunc"})," specifications and then assign it within the middleware configuration. Consider the following straightforward illustration:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'func logValues(c echo.Context, v middleware.RequestLoggerValues) error {\n    fmt.Printf("Request Method: %s, URI: %s\\n", v.Method, v.URI)\n    return nil\n}\n\ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n    LogValuesFunc: logValues,\n}))\n'})}),"\n",(0,o.jsx)(t.h4,{id:"2-if-parameters-in-logs-are-empty",children:"2. If Parameters in Logs Are Empty"}),"\n",(0,o.jsxs)(t.p,{children:["When investigating logging-related glitches, if you notice that certain parameters like ",(0,o.jsx)(t.code,{children:"v.URI"})," and ",(0,o.jsx)(t.code,{children:"v.Status"})," within the ",(0,o.jsx)(t.code,{children:"LogValuesFunc"})," function produce empty outputs, your focus should shift to validating the relevant configuration elements. Specifically, check whether the corresponding items (such as ",(0,o.jsx)(t.code,{children:"LogStatus"}),", ",(0,o.jsx)(t.code,{children:"LogURI"}),", etc.) in ",(0,o.jsx)(t.code,{children:"e.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{...}))"})," have been erroneously set to ",(0,o.jsx)(t.code,{children:"false"})," or failed to activate properly due to miscellaneous factors. Ensure these configuration particulars are accurately configured so that the pertinent request and response data can be precisely logged."]})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var r=n(6540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);