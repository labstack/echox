"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7867],{16:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"guide/error-handling","title":"Error Handling","description":"Error handling","source":"@site/docs/guide/error-handling.md","sourceDirName":"guide","slug":"/error-handling","permalink":"/docs/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/labstack/echox/blob/master/website/docs/guide/error-handling.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"description":"Error handling","slug":"/error-handling","sidebar_position":6},"sidebar":"docsSidebar","previous":{"title":"Cookies","permalink":"/docs/cookies"},"next":{"title":"Start Server","permalink":"/docs/start-server"}}');var t=n(4848),s=n(8453);const a={description:"Error handling",slug:"/error-handling",sidebar_position:6},i="Error Handling",d={},c=[{value:"Default HTTP Error Handler",id:"default-http-error-handler",level:2},{value:"Custom HTTP Error Handler",id:"custom-http-error-handler",level:2},{value:"Error Pages",id:"error-pages",level:3}];function l(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"error-handling",children:"Error Handling"})}),"\n",(0,t.jsx)(r.p,{children:"Echo advocates for centralized HTTP error handling by returning error from middleware\nand handlers. Centralized error handler allows us to log errors to external services\nfrom a unified location and send a customized HTTP response to the client."}),"\n",(0,t.jsxs)(r.p,{children:["You can return a standard ",(0,t.jsx)(r.code,{children:"error"})," or ",(0,t.jsx)(r.code,{children:"echo.*HTTPError"}),"."]}),"\n",(0,t.jsx)(r.p,{children:"For example, when basic auth middleware finds invalid credentials it returns\n401 - Unauthorized error, aborting the current HTTP request."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'e.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n  return func(c echo.Context) error {\n    // Extract the credentials from HTTP request header and perform a security\n    // check\n\n    // For invalid credentials\n    return echo.NewHTTPError(http.StatusUnauthorized, "Please provide valid credentials")\n\n    // For valid credentials call next\n    // return next(c)\n  }\n})\n'})}),"\n",(0,t.jsxs)(r.p,{children:["You can also use ",(0,t.jsx)(r.code,{children:"echo.NewHTTPError()"}),' without a message, in that case status text is used\nas an error message. For example, "Unauthorized".']}),"\n",(0,t.jsx)(r.h2,{id:"default-http-error-handler",children:"Default HTTP Error Handler"}),"\n",(0,t.jsx)(r.p,{children:"Echo provides a default HTTP error handler which sends error in a JSON format."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:'{\n  "message": "error connecting to redis"\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["For a standard ",(0,t.jsx)(r.code,{children:"error"}),", response is sent as ",(0,t.jsx)(r.code,{children:"500 - Internal Server Error"}),"; however,\nif you are running in a debug mode, the original error message is sent. If error\nis ",(0,t.jsx)(r.code,{children:"*HTTPError"}),", response is sent with the provided status code and message.\nIf logging is on, the error message is also logged."]}),"\n",(0,t.jsx)(r.h2,{id:"custom-http-error-handler",children:"Custom HTTP Error Handler"}),"\n",(0,t.jsxs)(r.p,{children:["Custom HTTP error handler can be set via ",(0,t.jsx)(r.code,{children:"e.HTTPErrorHandler"})]}),"\n",(0,t.jsx)(r.p,{children:"For most cases default error HTTP handler should be sufficient; however, a custom HTTP\nerror handler can come handy if you want to capture different type of errors and\ntake action accordingly e.g. send notification email or log error to a centralized\nsystem. You can also send customized response to the client e.g. error page or\njust a JSON response."}),"\n",(0,t.jsx)(r.h3,{id:"error-pages",children:"Error Pages"}),"\n",(0,t.jsxs)(r.p,{children:["The following custom HTTP error handler shows how to display error pages for different\ntype of errors and logs the error. The name of the error page should be like ",(0,t.jsx)(r.code,{children:"<CODE>.html"})," e.g. ",(0,t.jsx)(r.code,{children:"500.html"}),". You can look into this project\n",(0,t.jsx)(r.a,{href:"https://github.com/AndiDittrich/HttpErrorPages",children:"https://github.com/AndiDittrich/HttpErrorPages"})," for pre-built error pages."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func customHTTPErrorHandler(err error, c echo.Context) {\n \tif c.Response().Committed { \n \t\treturn \n \t}\n\n\tcode := http.StatusInternalServerError\n\tif he, ok := err.(*echo.HTTPError); ok {\n\t\tcode = he.Code\n\t}\n\tc.Logger().Error(err)\n\terrorPage := fmt.Sprintf("%d.html", code)\n\tif err := c.File(errorPage); err != nil {\n\t\tc.Logger().Error(err)\n\t}\n}\n\ne.HTTPErrorHandler = customHTTPErrorHandler\n'})}),"\n",(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsx)(r.p,{children:"Instead of writing logs to the logger, you can also write them to an external service like Elasticsearch or Splunk."})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var o=n(6540);const t={},s=o.createContext(t);function a(e){const r=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);