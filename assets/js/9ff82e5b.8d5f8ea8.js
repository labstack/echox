"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4190],{3405:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"guide/testing","title":"Testing","description":"Testing handler and middleware","source":"@site/docs/guide/testing.md","sourceDirName":"guide","slug":"/testing","permalink":"/docs/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/labstack/echox/blob/master/website/docs/guide/testing.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"description":"Testing handler and middleware","slug":"/testing","sidebar_position":13},"sidebar":"docsSidebar","previous":{"title":"Templates","permalink":"/docs/templates"},"next":{"title":"Middleware","permalink":"/docs/category/middleware"}}');var s=n(4848),a=n(8453);const i={description:"Testing handler and middleware",slug:"/testing",sidebar_position:13},c="Testing",d={},l=[{value:"Testing Handler",id:"testing-handler",level:2},{value:"CreateUser",id:"createuser",level:3},{value:"GetUser",id:"getuser",level:3},{value:"Using Form Payload",id:"using-form-payload",level:3},{value:"Setting Path Params",id:"setting-path-params",level:3},{value:"Setting Query Params",id:"setting-query-params",level:3},{value:"Testing Middleware",id:"testing-middleware",level:2}];function o(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,s.jsx)(t.h2,{id:"testing-handler",children:"Testing Handler"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"GET"})," ",(0,s.jsx)(t.code,{children:"/users/:id"})]}),"\n",(0,s.jsxs)(t.p,{children:["Handler below retrieves user by id from the database. If user is not found it returns\n",(0,s.jsx)(t.code,{children:"404"})," error with a message."]}),"\n",(0,s.jsx)(t.h3,{id:"createuser",children:"CreateUser"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"POST"})," ",(0,s.jsx)(t.code,{children:"/users"})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Accepts JSON payload"}),"\n",(0,s.jsxs)(t.li,{children:["On success ",(0,s.jsx)(t.code,{children:"201 - Created"})]}),"\n",(0,s.jsxs)(t.li,{children:["On error ",(0,s.jsx)(t.code,{children:"500 - Internal Server Error"})]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"getuser",children:"GetUser"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"GET"})," ",(0,s.jsx)(t.code,{children:"/users/:email"})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["On success ",(0,s.jsx)(t.code,{children:"200 - OK"})]}),"\n",(0,s.jsxs)(t.li,{children:["On error ",(0,s.jsx)(t.code,{children:"404 - Not Found"})," if user is not found otherwise ",(0,s.jsx)(t.code,{children:"500 - Internal Server Error"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"handler.go"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'package handler\n\nimport (\n\t"net/http"\n\n\t"github.com/labstack/echo/v4"\n)\n\ntype (\n\tUser struct {\n\t\tName  string `json:"name" form:"name"`\n\t\tEmail string `json:"email" form:"email"`\n\t}\n\thandler struct {\n\t\tdb map[string]*User\n\t}\n)\n\nfunc (h *handler) createUser(c echo.Context) error {\n\tu := new(User)\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\treturn c.JSON(http.StatusCreated, u)\n}\n\nfunc (h *handler) getUser(c echo.Context) error {\n\temail := c.Param("email")\n\tuser := h.db[email]\n\tif user == nil {\n\t\treturn echo.NewHTTPError(http.StatusNotFound, "user not found")\n\t}\n\treturn c.JSON(http.StatusOK, user)\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"handler_test.go"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'package handler\n\nimport (\n\t"net/http"\n\t"net/http/httptest"\n\t"strings"\n\t"testing"\n\n\t"github.com/labstack/echo/v4"\n\t"github.com/stretchr/testify/assert"\n)\n\nvar (\n\tmockDB = map[string]*User{\n\t\t"jon@labstack.com": &User{"Jon Snow", "jon@labstack.com"},\n\t}\n\tuserJSON = `{"name":"Jon Snow","email":"jon@labstack.com"}`\n)\n\nfunc TestCreateUser(t *testing.T) {\n\t// Setup\n\te := echo.New()\n\treq := httptest.NewRequest(http.MethodPost, "/", strings.NewReader(userJSON))\n\treq.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n\trec := httptest.NewRecorder()\n\tc := e.NewContext(req, rec)\n\th := &handler{mockDB}\n\n\t// Assertions\n\tif assert.NoError(t, h.createUser(c)) {\n\t\tassert.Equal(t, http.StatusCreated, rec.Code)\n\t\tassert.Equal(t, userJSON, rec.Body.String())\n\t}\n}\n\nfunc TestGetUser(t *testing.T) {\n\t// Setup\n\te := echo.New()\n\treq := httptest.NewRequest(http.MethodGet, "/", nil)\n\trec := httptest.NewRecorder()\n\tc := e.NewContext(req, rec)\n\tc.SetPath("/users/:email")\n\tc.SetParamNames("email")\n\tc.SetParamValues("jon@labstack.com")\n\th := &handler{mockDB}\n\n\t// Assertions\n\tif assert.NoError(t, h.getUser(c)) {\n\t\tassert.Equal(t, http.StatusOK, rec.Code)\n\t\tassert.Equal(t, userJSON, rec.Body.String())\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"using-form-payload",children:"Using Form Payload"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'// import "net/url"\nf := make(url.Values)\nf.Set("name", "Jon Snow")\nf.Set("email", "jon@labstack.com")\nreq := httptest.NewRequest(http.MethodPost, "/", strings.NewReader(f.Encode()))\nreq.Header.Set(echo.HeaderContentType, echo.MIMEApplicationForm)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"setting-path-params",children:"Setting Path Params"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'c.SetParamNames("id", "email")\nc.SetParamValues("1", "jon@labstack.com")\n'})}),"\n",(0,s.jsx)(t.h3,{id:"setting-query-params",children:"Setting Query Params"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'// import "net/url"\nq := make(url.Values)\nq.Set("email", "jon@labstack.com")\nreq := httptest.NewRequest(http.MethodGet, "/?"+q.Encode(), nil)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"testing-middleware",children:"Testing Middleware"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"TBD"})}),"\n",(0,s.jsxs)(t.p,{children:["For now you can look into built-in middleware ",(0,s.jsx)(t.a,{href:"https://github.com/labstack/echo/tree/master/middleware",children:"test cases"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(6540);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);