"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[960],{3533:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"middleware/rate-limiter","title":"Rate Limiter","description":"Rate limiter middleware","source":"@site/docs/middleware/rate-limiter.md","sourceDirName":"middleware","slug":"/middleware/rate-limiter","permalink":"/docs/middleware/rate-limiter","draft":false,"unlisted":false,"editUrl":"https://github.com/labstack/echox/blob/master/website/docs/middleware/rate-limiter.md","tags":[],"version":"current","frontMatter":{"description":"Rate limiter middleware"},"sidebar":"docsSidebar","previous":{"title":"Proxy","permalink":"/docs/middleware/proxy"},"next":{"title":"Recover","permalink":"/docs/middleware/recover"}}');var i=t(4848),o=t(8453);const a={description:"Rate limiter middleware"},d="Rate Limiter",s={},c=[{value:"Usage",id:"usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Errors",id:"errors",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Default Configuration",id:"default-configuration",level:3}];function l(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"rate-limiter",children:"Rate Limiter"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"RateLimiter"})," provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period."]}),"\n",(0,i.jsx)(r.p,{children:"By default an in-memory store is used for keeping track of requests. The default in-memory implementation is focused on correctness and\nmay not be the best option for a high number of concurrent requests or a large number of different identifiers (>16k)."}),"\n",(0,i.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(r.p,{children:["To add a rate limit to your application simply add the ",(0,i.jsx)(r.code,{children:"RateLimiter"})," middleware.\nThe example below will limit the application to 20 requests/sec using the default in-memory store:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:"e.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(rate.Limit(20))))\n"})}),"\n",(0,i.jsx)(r.admonition,{type:"info",children:(0,i.jsx)(r.p,{children:"If the provided rate is a float number, Burst will be treated as the rounded down value of the rate."})}),"\n",(0,i.jsx)(r.h2,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:"config := middleware.RateLimiterConfig{\n    Skipper: middleware.DefaultSkipper,\n    Store: middleware.NewRateLimiterMemoryStoreWithConfig(\n        middleware.RateLimiterMemoryStoreConfig{Rate: rate.Limit(10), Burst: 30, ExpiresIn: 3 * time.Minute},\n    ),\n    IdentifierExtractor: func(ctx echo.Context) (string, error) {\n        id := ctx.RealIP()\n        return id, nil\n    },\n    ErrorHandler: func(context echo.Context, err error) error {\n        return context.JSON(http.StatusForbidden, nil)\n    },\n    DenyHandler: func(context echo.Context, identifier string,err error) error {\n        return context.JSON(http.StatusTooManyRequests, nil)\n    },\n}\n\ne.Use(middleware.RateLimiterWithConfig(config))\n"})}),"\n",(0,i.jsx)(r.h3,{id:"errors",children:"Errors"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'var (\n\t// ErrRateLimitExceeded denotes an error raised when rate limit is exceeded\n\tErrRateLimitExceeded = echo.NewHTTPError(http.StatusTooManyRequests, "rate limit exceeded")\n\t// ErrExtractorError denotes an error raised when extractor function is unsuccessful\n\tErrExtractorError = echo.NewHTTPError(http.StatusForbidden, "error while extracting identifier")\n)\n'})}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsx)(r.p,{children:"If you need to implement your own store, be sure to implement the RateLimiterStore interface and pass it to RateLimiterConfig and you're good to go!"})}),"\n",(0,i.jsx)(r.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:"type RateLimiterConfig struct {\n    Skipper    Skipper\n    BeforeFunc BeforeFunc\n    // IdentifierExtractor uses echo.Context to extract the identifier for a visitor\n    IdentifierExtractor Extractor\n    // Store defines a store for the rate limiter\n    Store RateLimiterStore\n    // ErrorHandler provides a handler to be called when IdentifierExtractor returns a non-nil error\n    ErrorHandler func(context echo.Context, err error) error\n    // DenyHandler provides a handler to be called when RateLimiter denies access\n    DenyHandler func(context echo.Context, identifier string, err error) error\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:"// DefaultRateLimiterConfig defines default values for RateLimiterConfig\nvar DefaultRateLimiterConfig = RateLimiterConfig{\n\tSkipper: DefaultSkipper,\n\tIdentifierExtractor: func(ctx echo.Context) (string, error) {\n\t\tid := ctx.RealIP()\n\t\treturn id, nil\n\t},\n\tErrorHandler: func(context echo.Context, err error) error {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:     ErrExtractorError.Code,\n\t\t\tMessage:  ErrExtractorError.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n\tDenyHandler: func(context echo.Context, identifier string, err error) error {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:     ErrRateLimitExceeded.Code,\n\t\t\tMessage:  ErrRateLimitExceeded.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>d});var n=t(6540);const i={},o=n.createContext(i);function a(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);