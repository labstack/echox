"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1874],{7094:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"middleware/prometheus","title":"Prometheus","description":"Prometheus metrics middleware","source":"@site/docs/middleware/prometheus.md","sourceDirName":"middleware","slug":"/middleware/prometheus","permalink":"/docs/middleware/prometheus","draft":false,"unlisted":false,"editUrl":"https://github.com/labstack/echox/blob/master/website/docs/middleware/prometheus.md","tags":[],"version":"current","frontMatter":{"description":"Prometheus metrics middleware"},"sidebar":"docsSidebar","previous":{"title":"Method Override","permalink":"/docs/middleware/method-override"},"next":{"title":"Proxy","permalink":"/docs/middleware/proxy"}}');var s=r(4848),o=r(8453);const i={description:"Prometheus metrics middleware"},c="Prometheus",a={},h=[{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Serving custom Prometheus Metrics",id:"serving-custom-prometheus-metrics",level:3},{value:"Skipping URL(s)",id:"skipping-urls",level:3},{value:"Complex Scenarios",id:"complex-scenarios",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"prometheus",children:"Prometheus"})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"Echo community contribution"})}),"\n",(0,s.jsx)(t.p,{children:"Prometheus middleware generates metrics for HTTP requests."}),"\n",(0,s.jsx)(t.p,{children:"There are 2 versions of Prometheus middleware:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["latest (recommended) ",(0,s.jsx)(t.a,{href:"https://github.com/labstack/echo-contrib/blob/master/echoprometheus/prometheus.go",children:"https://github.com/labstack/echo-contrib/blob/master/echoprometheus/prometheus.go"})]}),"\n",(0,s.jsxs)(t.li,{children:["old (deprecated) ",(0,s.jsx)(t.a,{href:"https://github.com/labstack/echo-contrib/blob/master/prometheus/prometheus.go",children:"https://github.com/labstack/echo-contrib/blob/master/prometheus/prometheus.go"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Migration guide from old to newer middleware can found ",(0,s.jsx)(t.a,{href:"https://github.com/labstack/echo-contrib/blob/master/echoprometheus/README.md",children:"here"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Add needed module ",(0,s.jsx)(t.code,{children:"go get -u github.com/labstack/echo-contrib"})]}),"\n",(0,s.jsxs)(t.li,{children:["Add Prometheus middleware and metrics serving route","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'e := echo.New()\ne.Use(echoprometheus.NewMiddleware("myapp")) // adds middleware to gather metrics\ne.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.p,{children:"Serve metric from the same server as where metrics is gathered"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"errors"\n\t"github.com/labstack/echo-contrib/echoprometheus"\n\t"github.com/labstack/echo/v4"\n\t"log"\n\t"net/http"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(echoprometheus.NewMiddleware("myapp")) // adds middleware to gather metrics\n\te.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\t\n\te.GET("/hello", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, "hello")\n\t})\n\n\tif err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Serve metrics on a separate port"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'func main() {\n\tapp := echo.New() // this Echo instance will serve route on port 8080\n\tapp.Use(echoprometheus.NewMiddleware("myapp")) // adds middleware to gather metrics\n\n\tgo func() {\n\t\tmetrics := echo.New() // this Echo will run on separate port 8081\n\t\tmetrics.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\t\tif err := metrics.Start(":8081"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\tapp.GET("/hello", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, "hello")\n\t})\n\n\tif err := app.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Sample output (for first example)"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'curl http://localhost:8080/metrics\n\n# HELP echo_request_duration_seconds The HTTP request latencies in seconds.\n# TYPE echo_request_duration_seconds summary\necho_request_duration_seconds_sum 0.41086482\necho_request_duration_seconds_count 1\n# HELP echo_request_size_bytes The HTTP request sizes in bytes.\n# TYPE echo_request_size_bytes summary\necho_request_size_bytes_sum 56\necho_request_size_bytes_count 1\n# HELP echo_requests_total How many HTTP requests processed, partitioned by status code and HTTP method.\n# TYPE echo_requests_total counter\necho_requests_total{code="200",host="localhost:8080",method="GET",url="/"} 1\n# HELP echo_response_size_bytes The HTTP response sizes in bytes.\n# TYPE echo_response_size_bytes summary\necho_response_size_bytes_sum 61\necho_response_size_bytes_count 1\n...\n'})}),"\n",(0,s.jsx)(t.h2,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,s.jsx)(t.h3,{id:"serving-custom-prometheus-metrics",children:"Serving custom Prometheus Metrics"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Usage"})}),"\n",(0,s.jsx)(t.p,{children:"Using custom metrics with Prometheus default registry:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"errors"\n\t"github.com/labstack/echo-contrib/echoprometheus"\n\t"github.com/labstack/echo/v4"\n\t"github.com/prometheus/client_golang/prometheus"\n\t"log"\n\t"net/http"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tcustomCounter := prometheus.NewCounter( // create new counter metric. This is replacement for `prometheus.Metric` struct\n\t\tprometheus.CounterOpts{\n\t\t\tName: "custom_requests_total",\n\t\t\tHelp: "How many HTTP requests processed, partitioned by status code and HTTP method.",\n\t\t},\n\t)\n\tif err := prometheus.Register(customCounter); err != nil { // register your new counter metric with default metrics registry\n\t\tlog.Fatal(err)\n\t}\n\n\te.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n\t\tAfterNext: func(c echo.Context, err error) {\n\t\t\tcustomCounter.Inc() // use our custom metric in middleware. after every request increment the counter\n\t\t},\n\t}))\n\te.GET("/metrics", echoprometheus.NewHandler()) // register route for getting gathered metrics\n\n\tif err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"or create your own registry and register custom metrics with that:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"errors"\n\t"github.com/labstack/echo-contrib/echoprometheus"\n\t"github.com/labstack/echo/v4"\n\t"github.com/prometheus/client_golang/prometheus"\n\t"log"\n\t"net/http"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tcustomRegistry := prometheus.NewRegistry() // create custom registry for your custom metrics\n\tcustomCounter := prometheus.NewCounter(    // create new counter metric. This is replacement for `prometheus.Metric` struct\n\t\tprometheus.CounterOpts{\n\t\t\tName: "custom_requests_total",\n\t\t\tHelp: "How many HTTP requests processed, partitioned by status code and HTTP method.",\n\t\t},\n\t)\n\tif err := customRegistry.Register(customCounter); err != nil { // register your new counter metric with metrics registry\n\t\tlog.Fatal(err)\n\t}\n\n\te.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n\t\tAfterNext: func(c echo.Context, err error) {\n\t\t\tcustomCounter.Inc() // use our custom metric in middleware. after every request increment the counter\n\t\t},\n\t\tRegisterer: customRegistry, // use our custom registry instead of default Prometheus registry\n\t}))\n\te.GET("/metrics", echoprometheus.NewHandlerWithConfig(echoprometheus.HandlerConfig{Gatherer: customRegistry})) // register route for getting gathered metrics data from our custom Registry\n\n\tif err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"skipping-urls",children:"Skipping URL(s)"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Usage"})}),"\n",(0,s.jsx)(t.p,{children:"A middleware skipper can be passed to avoid generating metrics to certain URL(s)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"errors"\n\t"github.com/labstack/echo-contrib/echoprometheus"\n\t"github.com/labstack/echo/v4"\n\t"log"\n\t"net/http"\n\t"strings"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tmwConfig := echoprometheus.MiddlewareConfig{\n\t\tSkipper: func(c echo.Context) bool {\n\t\t\treturn strings.HasPrefix(c.Path(), "/testurl")\n\t\t}, // does not gather metrics metrics on routes starting with `/testurl`\n\t}\n\te.Use(echoprometheus.NewMiddlewareWithConfig(mwConfig)) // adds middleware to gather metrics\n\n\te.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n\te.GET("/", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, "Hello, World!")\n\t})\n\n\tif err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"complex-scenarios",children:"Complex Scenarios"}),"\n",(0,s.jsxs)(t.p,{children:["Example: modify default ",(0,s.jsx)(t.code,{children:"echoprometheus"})," metrics definitions"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"errors"\n\t"github.com/labstack/echo-contrib/echoprometheus"\n\t"github.com/labstack/echo/v4"\n\t"github.com/prometheus/client_golang/prometheus"\n\t"log"\n\t"net/http"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n\t\t// labels of default metrics can be modified or added with `LabelFuncs` function\n\t\tLabelFuncs: map[string]echoprometheus.LabelValueFunc{\n\t\t\t"scheme": func(c echo.Context, err error) string { // additional custom label\n\t\t\t\treturn c.Scheme()\n\t\t\t},\n\t\t\t"host": func(c echo.Context, err error) string { // overrides default \'host\' label value\n\t\t\t\treturn "y_" + c.Request().Host\n\t\t\t},\n\t\t},\n\t\t// The `echoprometheus` middleware registers the following metrics by default:\n\t\t// - Histogram: request_duration_seconds\n\t\t// - Histogram: response_size_bytes\n\t\t// - Histogram: request_size_bytes\n\t\t// - Counter: requests_total\n\t\t// which can be modified with `HistogramOptsFunc` and `CounterOptsFunc` functions\n\t\tHistogramOptsFunc: func(opts prometheus.HistogramOpts) prometheus.HistogramOpts {\n\t\t\tif opts.Name == "request_duration_seconds" {\n\t\t\t\topts.Buckets = []float64{1000.0, 10_000.0, 100_000.0, 1_000_000.0} // 1KB ,10KB, 100KB, 1MB\n\t\t\t}\n\t\t\treturn opts\n\t\t},\n\t\tCounterOptsFunc: func(opts prometheus.CounterOpts) prometheus.CounterOpts {\n\t\t\tif opts.Name == "requests_total" {\n\t\t\t\topts.ConstLabels = prometheus.Labels{"my_const": "123"}\n\t\t\t}\n\t\t\treturn opts\n\t\t},\n\t})) // adds middleware to gather metrics\n\n\te.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n\te.GET("/hello", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, "hello")\n\t})\n\n\tif err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>c});var n=r(6540);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);