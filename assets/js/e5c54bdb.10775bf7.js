"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8025],{4813:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"guide/templates","title":"Templates","description":"Using templates","source":"@site/docs/guide/templates.md","sourceDirName":"guide","slug":"/templates","permalink":"/docs/templates","draft":false,"unlisted":false,"editUrl":"https://github.com/labstack/echox/blob/master/website/docs/guide/templates.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"description":"Using templates","slug":"/templates","sidebar_position":12},"sidebar":"docsSidebar","previous":{"title":"Static Files","permalink":"/docs/static-files"},"next":{"title":"Testing","permalink":"/docs/testing"}}');var s=n(4848),a=n(8453);const l={description:"Using templates",slug:"/templates",sidebar_position:12},i="Templates",o={},c=[{value:"Rendering",id:"rendering",level:2},{value:"Advanced - Calling Echo from templates",id:"advanced---calling-echo-from-templates",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"templates",children:"Templates"})}),"\n",(0,s.jsx)(t.h2,{id:"rendering",children:"Rendering"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Context#Render(code int, name string, data interface{}) error"})," renders a template\nwith data and sends a text/html response with status code. Templates can be registered by setting ",(0,s.jsx)(t.code,{children:"Echo.Renderer"}),", allowing us to use any template engine."]}),"\n",(0,s.jsxs)(t.p,{children:["Example below shows how to use Go ",(0,s.jsx)(t.code,{children:"html/template"}),":"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Implement ",(0,s.jsx)(t.code,{children:"echo.Renderer"})," interface"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"type Template struct {\n    templates *template.Template\n}\n\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n\treturn t.templates.ExecuteTemplate(w, name, data)\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Pre-compile templates"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"public/views/hello.html"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:'{{define "hello"}}Hello, {{.}}!{{end}}\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'t := &Template{\n    templates: template.Must(template.ParseGlob("public/views/*.html")),\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Register templates"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'e := echo.New()\ne.Renderer = t\ne.GET("/hello", Hello)\n'})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Render a template inside your handler"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'func Hello(c echo.Context) error {\n\treturn c.Render(http.StatusOK, "hello", "World")\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"advanced---calling-echo-from-templates",children:"Advanced - Calling Echo from templates"}),"\n",(0,s.jsxs)(t.p,{children:["In certain situations it might be useful to generate URIs from the templates. In order to do so, you need to call ",(0,s.jsx)(t.code,{children:"Echo#Reverse"})," from the templates itself. Golang's ",(0,s.jsx)(t.code,{children:"html/template"})," package is not the best suited for this job, but this can be done in two ways: by providing a common method on all objects passed to templates or by passing ",(0,s.jsx)(t.code,{children:"map[string]interface{}"})," and augmenting this object in the custom renderer. Given the flexibility of the latter approach, here is a sample program:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"template.html"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:'<html>\n    <body>\n        <h1>Hello {{index . "name"}}</h1>\n\n        <p>{{ with $x := index . "reverse" }}\n           {{ call $x "foobar" }} &lt;-- this will call the $x with parameter "foobar"\n           {{ end }}\n        </p>\n    </body>\n</html>\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"server.go"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"html/template"\n\t"io"\n\t"net/http"\n\n\t"github.com/labstack/echo/v4"\n)\n\n// TemplateRenderer is a custom html/template renderer for Echo framework\ntype TemplateRenderer struct {\n\ttemplates *template.Template\n}\n\n// Render renders a template document\nfunc (t *TemplateRenderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n\n\t// Add global methods if data is a map\n\tif viewContext, isMap := data.(map[string]interface{}); isMap {\n\t\tviewContext["reverse"] = c.Echo().Reverse\n\t}\n\n\treturn t.templates.ExecuteTemplate(w, name, data)\n}\n\nfunc main() {\n  e := echo.New()\n  renderer := &TemplateRenderer{\n      templates: template.Must(template.ParseGlob("*.html")),\n  }\n  e.Renderer = renderer\n\n  // Named route "foobar"\n  e.GET("/something", func(c echo.Context) error {\n      return c.Render(http.StatusOK, "template.html", map[string]interface{}{\n          "name": "Dolly!",\n      })\n  }).Name = "foobar"\n\n  e.Logger.Fatal(e.Start(":8000"))\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var r=n(6540);const s={},a=r.createContext(s);function l(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);