"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3205],{3979:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"middleware/rewrite","title":"Rewrite","description":"Rewrite middleware","source":"@site/docs/middleware/rewrite.md","sourceDirName":"middleware","slug":"/middleware/rewrite","permalink":"/docs/middleware/rewrite","draft":false,"unlisted":false,"editUrl":"https://github.com/labstack/echox/blob/master/website/docs/middleware/rewrite.md","tags":[],"version":"current","frontMatter":{"description":"Rewrite middleware"},"sidebar":"docsSidebar","previous":{"title":"Request ID","permalink":"/docs/middleware/request-id"},"next":{"title":"Secure","permalink":"/docs/middleware/secure"}}');var t=n(4848),s=n(8453);const d={description:"Rewrite middleware"},a="Rewrite",l={},o=[{value:"Usage",id:"usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Regex-based Rules",id:"regex-based-rules",level:3}];function c(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"rewrite",children:"Rewrite"})}),"\n",(0,t.jsx)(r.p,{children:"Rewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links."}),"\n",(0,t.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'e.Pre(middleware.Rewrite(map[string]string{\n  "/old":              "/new",\n  "/api/*":            "/$1",\n  "/js/*":             "/public/javascripts/$1",\n  "/users/*/orders/*": "/user/$1/order/$2",\n}))\n'})}),"\n",(0,t.jsxs)(r.p,{children:["The values captured in asterisk can be retrieved by index e.g. $1, $2 and so on.\nEach asterisk will be non-greedy (translated to a capture group ",(0,t.jsx)(r.code,{children:"(.*?)"}),") and if using\nmultiple asterisk a trailing ",(0,t.jsx)(r.code,{children:"*"}),' will match the "rest" of the path.']}),"\n",(0,t.jsx)(r.admonition,{type:"caution",children:(0,t.jsxs)(r.p,{children:["Rewrite middleware should be registered via ",(0,t.jsx)(r.code,{children:"Echo#Pre()"})," to get triggered before the router."]})}),"\n",(0,t.jsx)(r.h2,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,t.jsx)(r.h3,{id:"usage-1",children:"Usage"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"e := echo.New()\ne.Pre(middleware.RewriteWithConfig(middleware.RewriteConfig{}))\n"})}),"\n",(0,t.jsx)(r.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'// RewriteConfig defines the config for Rewrite middleware.\n  RewriteConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Rules defines the URL path rewrite rules. The values captured in asterisk can be\n    // retrieved by index e.g. $1, $2 and so on.\n    Rules map[string]string `yaml:"rules"`\n\n    // RegexRules defines the URL path rewrite rules using regexp.Rexexp with captures\n    // Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n    RegexRules map[*regexp.Regexp]string\n  }\n'})}),"\n",(0,t.jsx)(r.p,{children:"Default Configuration:"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Name"}),(0,t.jsx)(r.th,{children:"Value"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Skipper"}),(0,t.jsx)(r.td,{children:"DefaultSkipper"})]})})]}),"\n",(0,t.jsx)(r.h3,{id:"regex-based-rules",children:"Regex-based Rules"}),"\n",(0,t.jsxs)(r.p,{children:["For advanced rewriting of paths rules may also be defined using regular expression.\nNormal capture groups can be defined using ",(0,t.jsx)(r.code,{children:"()"})," and referenced by index (",(0,t.jsx)(r.code,{children:"$1"}),", ",(0,t.jsx)(r.code,{children:"$2"}),", ...) for the rewritten path."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"RegexRules"})," and normal ",(0,t.jsx)(r.code,{children:"Rules"})," can be combined."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'  e.Pre(RewriteWithConfig(RewriteConfig{\n    Rules: map[string]string{\n      "^/v1/*": "/v2/$1",\n    },\n    RegexRules: map[*regexp.Regexp]string{\n      regexp.MustCompile("^/foo/([0-9].*)"):  "/num/$1",\n      regexp.MustCompile("^/bar/(.+?)/(.*)"): "/baz/$2/$1",\n    },\n  }))\n'})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>a});var i=n(6540);const t={},s=i.createContext(t);function d(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);